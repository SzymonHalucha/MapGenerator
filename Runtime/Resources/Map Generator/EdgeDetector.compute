#pragma kernel EdgeDetector

StructuredBuffer<float> OriginBuffer;
RWStructuredBuffer<float> TargetBuffer;

uint _Size;
float _Threshold;
float2 _StartOffset;

[numthreads(8, 8, 1)]
void EdgeDetector(uint3 id : SV_DispatchThreadID)
{
    uint x = id.x + _StartOffset.x;
    uint y = id.y + _StartOffset.y;

    float radiusX = 0;
    float radiusY = 0;

    for (int kernelX = -1; kernelX <= 1; kernelX++)
    {
        for (int kernelY = -1; kernelY <= 1; kernelY++)
        {
            int px = x + kernelX;
            int py = y + kernelY;

            if (px < 0 || px >= int(_Size) || py < 0 || py >= int(_Size))
                continue;

            float weight = abs(kernelX) * abs(kernelY);
            radiusX += OriginBuffer[px + py * _Size] * int(weight * kernelX);
            radiusY += OriginBuffer[px + py * _Size] * int(weight * kernelY);
        }
    }

    float radius = sqrt(radiusX * radiusX + radiusY * radiusY);
    TargetBuffer[x + y * _Size] = float(radius > _Threshold);
}