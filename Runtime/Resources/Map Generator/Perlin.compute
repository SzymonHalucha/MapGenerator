#include "Utils.cginc"
#pragma kernel Perlin

RWStructuredBuffer<float> TargetBuffer;

uint _Size;
uint _Seed;
uint _Octaves;
float _Scale;
float _Persistence;
float _Lacunarity;

[numthreads(8, 8, 1)]
void Perlin(uint3 id : SV_DispatchThreadID)
{
    float noise = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float amplitudeSum = 0.0;

    for (uint i = 0; i < _Octaves; i++)
    {
        float2 offset = float2(Range(_Seed + i, -100000, 100000), Range(_Seed + _Octaves - i, -100000, 100000));
        float scaledX = (float(id.x) - (float(_Size) * 0.5) + offset.x) / _Scale * frequency;
        float scaledY = (float(id.y) - (float(_Size) * 0.5) + offset.y) / _Scale * frequency;

        noise += PerlinNoise(scaledX, scaledY) * amplitude;
        amplitudeSum += amplitude;
        amplitude *= _Persistence;
        frequency *= _Lacunarity;
    }

    TargetBuffer[id.x + id.y * _Size] = noise / amplitudeSum;
}